// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: D.sql

package orm

import (
	"context"
)

const deleteBook = `-- name: DeleteBook :exec
DELETE
FROM Books
WHERE book_id = $1
RETURNING book_id, title, authors, publisher, publication_date, genre, description, language, edition, num_copies, location, image_url, keywords
`

func (q *Queries) DeleteBook(ctx context.Context, bookID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, bookID)
	return err
}

const deleteBorrowedBook = `-- name: DeleteBorrowedBook :exec
DELETE
FROM BorrowedBooks
WHERE borrowed_id = $1
`

func (q *Queries) DeleteBorrowedBook(ctx context.Context, borrowedID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBorrowedBook, borrowedID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM Users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const truncateDB = `-- name: TruncateDB :exec
TRUNCATE TABLE Books, Users, BorrowedBooks
`

func (q *Queries) TruncateDB(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateDB)
	return err
}
