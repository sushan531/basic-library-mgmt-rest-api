// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: C.sql

package orm

import (
	"context"
	"database/sql"
	"time"
)

const insertBook = `-- name: InsertBook :one
INSERT INTO Books (title, authors, publisher, publication_date, genre, description, language, edition, num_copies,
                   location, image_url, keywords)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING book_id, title, authors, publisher, publication_date, genre, description, language, edition, num_copies, location, image_url, keywords
`

type InsertBookParams struct {
	Title           string         `json:"title"`
	Authors         string         `json:"authors"`
	Publisher       sql.NullString `json:"publisher"`
	PublicationDate sql.NullTime   `json:"publication_date"`
	Genre           sql.NullString `json:"genre"`
	Description     sql.NullString `json:"description"`
	Language        sql.NullString `json:"language"`
	Edition         sql.NullInt32  `json:"edition"`
	NumCopies       sql.NullInt32  `json:"num_copies"`
	Location        sql.NullString `json:"location"`
	ImageUrl        sql.NullString `json:"image_url"`
	Keywords        sql.NullString `json:"keywords"`
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, insertBook,
		arg.Title,
		arg.Authors,
		arg.Publisher,
		arg.PublicationDate,
		arg.Genre,
		arg.Description,
		arg.Language,
		arg.Edition,
		arg.NumCopies,
		arg.Location,
		arg.ImageUrl,
		arg.Keywords,
	)
	var i Book
	err := row.Scan(
		&i.BookID,
		&i.Title,
		&i.Authors,
		&i.Publisher,
		&i.PublicationDate,
		&i.Genre,
		&i.Description,
		&i.Language,
		&i.Edition,
		&i.NumCopies,
		&i.Location,
		&i.ImageUrl,
		&i.Keywords,
	)
	return i, err
}

const insertBorrowedBook = `-- name: InsertBorrowedBook :one
INSERT INTO BorrowedBooks (user_id, book_id, borrowed_date, returned_date, due_date)
VALUES ($1, $2, $3, $4, $5)
RETURNING borrowed_id, user_id, book_id, borrowed_date, returned_date, due_date
`

type InsertBorrowedBookParams struct {
	UserID       int32        `json:"user_id"`
	BookID       int32        `json:"book_id"`
	BorrowedDate time.Time    `json:"borrowed_date"`
	ReturnedDate sql.NullTime `json:"returned_date"`
	DueDate      sql.NullTime `json:"due_date"`
}

func (q *Queries) InsertBorrowedBook(ctx context.Context, arg InsertBorrowedBookParams) (Borrowedbook, error) {
	row := q.db.QueryRowContext(ctx, insertBorrowedBook,
		arg.UserID,
		arg.BookID,
		arg.BorrowedDate,
		arg.ReturnedDate,
		arg.DueDate,
	)
	var i Borrowedbook
	err := row.Scan(
		&i.BorrowedID,
		&i.UserID,
		&i.BookID,
		&i.BorrowedDate,
		&i.ReturnedDate,
		&i.DueDate,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO Users (firstname,lastname, email, contact_number, address)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, email, firstname, lastname, contact_number, address
`

type InsertUserParams struct {
	Firstname     string         `json:"firstname"`
	Lastname      string         `json:"lastname"`
	Email         string         `json:"email"`
	ContactNumber sql.NullString `json:"contact_number"`
	Address       string         `json:"address"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.ContactNumber,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.ContactNumber,
		&i.Address,
	)
	return i, err
}
